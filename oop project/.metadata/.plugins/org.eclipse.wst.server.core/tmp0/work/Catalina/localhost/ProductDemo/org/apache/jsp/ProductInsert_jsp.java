/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-25 18:08:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ProductInsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Add Products</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/ProductInsert.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Add Product</h2>\r\n");
      out.write("        <form id=\"productForm\" action=\"insert\" method=\"post\">\r\n");
      out.write("            <div class=\"input-group\">\r\n");
      out.write("                <label for=\"productName\">Product Name</label>\r\n");
      out.write("                <input type=\"text\" id=\"productName\" name=\"name\" placeholder=\"Enter product name\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"input-group\">\r\n");
      out.write("                <label for=\"price\">Price</label>\r\n");
      out.write("                <input type=\"text\" id=\"price\" name=\"price\" placeholder=\"Enter price\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"input-group\">\r\n");
      out.write("                <label>Category</label>\r\n");
      out.write("                <div class=\"category-options\">\r\n");
      out.write("                    <input type=\"radio\" id=\"category1\" name=\"category\" value=\"Beverages\" required>\r\n");
      out.write("                    <label for=\"category1\">Beverages</label>\r\n");
      out.write("                    <input type=\"radio\" id=\"category2\" name=\"category\" value=\"Grocery\" required>\r\n");
      out.write("                    <label for=\"category2\">Grocery</label>\r\n");
      out.write("                    <input type=\"radio\" id=\"category3\" name=\"category\" value=\"Fresh\" required>\r\n");
      out.write("                    <label for=\"category3\">Fresh</label>\r\n");
      out.write("                    <input type=\"radio\" id=\"category4\" name=\"category\" value=\"Frozen\" required>\r\n");
      out.write("                    <label for=\"category4\">Frozen</label>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <button type=\"submit\" name=\"submit\" onclick=\"validateForm()\">Add Product</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("	    <script>function validateForm() {\r\n");
      out.write("	        var productName = document.getElementById(\"productName\").value;\r\n");
      out.write("	        var price = document.getElementById(\"price\").value;\r\n");
      out.write("	        var category = document.querySelector('input[name=\"category\"]:checked');\r\n");
      out.write("\r\n");
      out.write("	        if (productName === \"\" || price === \"\" || category === null) {\r\n");
      out.write("	            alert(\"All fields are required!\");\r\n");
      out.write("	        } else if (isNaN(parseFloat(price))) {\r\n");
      out.write("	            alert(\"Price must be a valid number!\");\r\n");
      out.write("	        } else {\r\n");
      out.write("	            // Form is valid, you can submit it or perform other actions here\r\n");
      out.write("	            // For example, you can submit the form using document.getElementById(\"productForm\").submit();\r\n");
      out.write("	            alert(\"Form submitted successfully!\");\r\n");
      out.write("	        }\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    \r\n");
      out.write("	    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
